{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","sys","main","temp","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kOAWeA,EATA,kBAEX,6BACI,wBAAIC,UAAU,0BAAd,iBACA,wBAAIA,UAAU,6BAAd,oDCMOC,EAVF,SAAAC,GAAK,OAEd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBAC9C,mDC8DOC,EAjEC,SAACN,GAAD,OAEZ,yBAAKF,UAAU,iBAGPE,EAAMO,MACNP,EAAMQ,SACF,uBAAGV,UAAU,gBAAb,YAEQ,4BACI,0BAAMA,UAAU,kBACVE,EAAMO,KADZ,IAEMP,EAAMQ,WAO5BR,EAAMS,aACF,uBAAGX,UAAU,gBAAb,eAEQ,4BACI,0BAAMA,UAAU,kBACVE,EAAMS,eAO5BT,EAAMU,UACF,uBAAGZ,UAAU,gBAAb,YAEQ,4BACI,0BAAMA,UAAU,kBACVE,EAAMU,YAO5BV,EAAMW,aACF,uBAAGb,UAAU,gBAAb,aAEQ,4BACI,0BAAMA,UAAU,kBACVE,EAAMW,eAO5BX,EAAMY,OACF,uBAAGd,UAAU,kBACPE,EAAMY,SCvDtBC,EAAU,mCAoFDC,E,4MAhFbC,MAAQ,CACNR,UAAMS,EACNR,aAASQ,EACTP,iBAAaO,EACbN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTd,W,uCAAa,WAAOe,GAAP,qBAAAA,EAAA,6DAEXA,EAAEC,iBACIX,EAAOU,EAAEE,OAAOC,SAASb,KAAKc,MAC9Bb,EAAUS,EAAEE,OAAOC,SAASZ,QAAQa,MAJ/B,SAMYC,MAAM,oDAAD,OAAqDf,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,mBANjB,cAMLU,EANK,gBAOQA,EAASC,OAPjB,OAOLC,EAPK,OASPlB,GAAQC,EAGZ,EAAKkB,SAAU,CAEbnB,KAAMkB,EAAKrB,KACXI,QAASiB,EAAKE,IAAInB,QAClBC,YAAagB,EAAKG,KAAKC,KACvBnB,SAAUe,EAAKG,KAAKlB,SACpBC,YAAac,EAAKK,QAAQ,GAAGnB,YAC7BC,MAAO,KAGT,EAAKc,SAAU,CACbnB,UAAMS,EACNR,aAASQ,EACTP,iBAAaO,EACbN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,4BA5BE,4C,6GAmCX,OAEE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAGb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAGA,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAY6B,KAAK7B,aAErB,kBAAC,EAAD,CACEK,KAAMwB,KAAKhB,MAAMR,KACjBC,QAASuB,KAAKhB,MAAMP,QACpBC,YAAasB,KAAKhB,MAAMN,YACxBC,SAAUqB,KAAKhB,MAAML,SACrBC,YAAaoB,KAAKhB,MAAMJ,YACxBC,MAAOmB,KAAKhB,MAAMH,kB,GApExBoB,IAAMC,W,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.800b33bc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n\r\n    <div>\r\n        <h1 className=\"title-container__title\">PLACE WEATHER</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, humidity and conditions.</h3>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    \r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City ...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country ...\"/>\r\n        <button>Check Weather</button>\r\n    </form>\r\n    \r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n// to wait until the user interacts with system then these information will appear\r\n// weather__value > white\r\nconst Weather = (props) => (\r\n\r\n    <div className=\"weather__info\">\r\n\r\n        { \r\n            props.city && \r\n            props.country && \r\n                <p className=\"weather__key\">\r\n                    Location: \r\n                        <tr>\r\n                            <span className=\"weather__value\"> \r\n                                { props.city }, \r\n                                { props.country }\r\n                            </span>\r\n                        </tr>\r\n                </p> \r\n        }\r\n\r\n        { \r\n            props.temperature && \r\n                <p className=\"weather__key\">\r\n                    Temperature: \r\n                        <tr>\r\n                            <span className=\"weather__value\"> \r\n                                { props.temperature } \r\n                            </span>\r\n                        </tr>\r\n                </p> \r\n        }\r\n\r\n        { \r\n            props.humidity && \r\n                <p className=\"weather__key\">\r\n                    Humidity: \r\n                        <tr>\r\n                            <span className=\"weather__value\"> \r\n                                { props.humidity } \r\n                            </span>\r\n                        </tr>\r\n                </p> \r\n        }\r\n\r\n        { \r\n            props.description && \r\n                <p className=\"weather__key\">\r\n                    Conditons: \r\n                        <tr>\r\n                            <span className=\"weather__value\"> \r\n                                { props.description } \r\n                            </span>\r\n                        </tr>\r\n                </p> \r\n        }\r\n\r\n        { \r\n            props.error && \r\n                <p className=\"weather__error\">\r\n                    { props.error }\r\n                </p> \r\n        }\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n// go to the openweathermap.org website > User settings > API keys\nconst API_KEY = \"1758a54807c381448fdbe527f39464cf\";\n\nclass App extends React.Component {\n\n  state = {  // state is an object that lives within a component and it's responsible for keeping track of changing data within a component. so, it could be the result of the user interaction  \n    city: undefined, \n    country: undefined,\n    temperature: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (a) => {\n    \n    a.preventDefault(); // to prevent full page refresh\n    const city = a.target.elements.city.value;\n    const country = a.target.elements.country.value;\n    // `` is used to inject the variables that we've defined within our files\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&unites=metric`); // makes HTTP calls and makes web requests easy  \n    const data = await api_call.json(); // whatever we get back from this API is going to get converted to days on with this method\n    \n    if (city && country) { // if city's value has been answered so if this returns correct then ...\n    // console.log(data);\n    // set the values of those states\n    this.setState( {\n      // get from console\n      city: data.name,\n      country: data.sys.country,\n      temperature: data.main.temp,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: \"\"\n    } );\n  } else {\n    this.setState( {\n      city: undefined,\n      country: undefined,\n      temperature: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: \"Please enter the value.\"\n    } );\n  }\n  }\n\n  // put the titles component on the left hand side, give it a width of 5 columns and on the right hand side, i want the form and the weather component and give that a width of 7 columns \n  render() {\n    return (\n\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n\n                {/* //5 of the 12 columns */}\n                <div className=\"col-xs-5 title-container\"> \n                  <Titles />\n                </div>\n\n                  <div className=\"col-xs-7 form-container\">\n                    <Form getWeather={this.getWeather}/>\n                      {/* display  */}\n                      <Weather \n                        city={this.state.city}\n                        country={this.state.country}\n                        temperature={this.state.temperature}\n                        humidity={this.state.humidity}\n                        description={this.state.description}\n                        error={this.state.error}\n                      />\n                  </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}